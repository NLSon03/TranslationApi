@using TranslationWeb.Models.Auth

<div class="modal fade show" style="display: block;" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Đặt lại mật khẩu</h5>
                <button type="button" class="btn-close" @onclick="OnCancel"></button>
            </div>
            <EditForm Model="@_model" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="newPassword" class="form-label">Mật khẩu mới</label>
                        <InputText type="password" id="newPassword" class="form-control" @bind-Value="_model.NewPassword" />
                        <ValidationMessage For="@(() => _model.NewPassword)" />
                    </div>
                    <div class="mb-3">
                        <label for="confirmPassword" class="form-label">Xác nhận mật khẩu mới</label>
                        <InputText type="password" id="confirmPassword" class="form-control" @bind-Value="_confirmPassword" />
                        @if (_passwordMismatch)
                        {
                            <div class="text-danger">Mật khẩu xác nhận không khớp</div>
                        }
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="OnCancel">Hủy</button>
                    <button type="submit" class="btn btn-primary">Lưu</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>
<div class="modal-backdrop fade show"></div>

@code {
    [Parameter] public string UserId { get; set; } = string.Empty;
    [Parameter] public EventCallback<ChangePasswordRequest> OnSave { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    private ChangePasswordRequest _model = new() { NewPassword = ""};
    private string _confirmPassword = string.Empty;
    private bool _passwordMismatch;

    private async Task HandleValidSubmit()
    {
        if (_model.NewPassword != _confirmPassword)
        {
            _passwordMismatch = true;
            return;
        }

        _passwordMismatch = false;
        await OnSave.InvokeAsync(_model);
    }
}