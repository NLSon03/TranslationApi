@using TranslationWeb.Models.ChatMessage
@using TranslationWeb.Models.Translation

<div class="chat-input">
    <div class="input-group">
        <div class="input-group-prepend">
            <button class="btn btn-outline-secondary dropdown-toggle" type="button" 
                    data-bs-toggle="dropdown" aria-expanded="false">
                <i class="bi bi-translate"></i>
            </button>
            <div class="dropdown-menu p-2">
                <div class="mb-2">
                    <label class="form-label">Từ ngôn ngữ:</label>
                    <select class="form-select" @bind="FromLanguage">
                        <option value="auto">Tự động phát hiện</option>
                        @foreach (var lang in Languages)
                        {
                            <option value="@lang.Code">@lang.Name</option>
                        }
                    </select>
                </div>
                <div>
                    <label class="form-label">Sang ngôn ngữ:</label>
                    <select class="form-select" @bind="ToLanguage">
                        @foreach (var lang in Languages)
                        {
                            <option value="@lang.Code">@lang.Name</option>
                        }
                    </select>
                </div>
            </div>
        </div>
        <input type="text" class="form-control" 
               placeholder="Nhập tin nhắn..." 
               @bind="Message"
               @bind:event="oninput"
               @onkeypress="HandleKeyPress" />
        <button class="btn btn-primary" @onclick="HandleSend" disabled="@string.IsNullOrWhiteSpace(Message)">
            <i class="bi bi-send"></i>
        </button>
    </div>
</div>

@code {
    [Parameter]
    public EventCallback<SendMessageRequest> OnSend { get; set; }

    private string Message { get; set; } = string.Empty;
    private string FromLanguage { get; set; } = "auto";
    private string ToLanguage { get; set; } = "vi";

    private static readonly List<Language> Languages = new()
    {
        new Language { Code = "vi", Name = "Tiếng Việt" },
        new Language { Code = "en", Name = "Tiếng Anh" },
        new Language { Code = "ja", Name = "Tiếng Nhật" },
        new Language { Code = "ko", Name = "Tiếng Hàn" },
        new Language { Code = "zh", Name = "Tiếng Trung" },
        new Language { Code = "fr", Name = "Tiếng Pháp" },
        new Language { Code = "de", Name = "Tiếng Đức" },
        new Language { Code = "ru", Name = "Tiếng Nga" },
        new Language { Code = "es", Name = "Tiếng Tây Ban Nha" },
        new Language { Code = "it", Name = "Tiếng Ý" }
    };

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(Message))
        {
            await HandleSend();
        }
    }

    private async Task HandleSend()
    {
        if (string.IsNullOrWhiteSpace(Message))
            return;

        var request = new SendMessageRequest
        {
            Content = Message,
            MessageType = "Text",
            FromLanguage = FromLanguage,
            ToLanguage = ToLanguage
        };

        await OnSend.InvokeAsync(request);
        Message = string.Empty;
    }
}