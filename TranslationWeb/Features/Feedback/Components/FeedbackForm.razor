@using Microsoft.AspNetCore.Components.Authorization
@using TranslationWeb.Models.Feedback
@using TranslationWeb.Infrastructure.Services.Api.Feedback
@inject IFeedbackService FeedbackService
@inject AuthenticationStateProvider AuthStateProvider

<div class="card">
    <div class="card-header bg-success text-white">
        <h5 class="mb-0">Gửi phản hồi của bạn</h5>
    </div>
    <div class="card-body">
        <EditForm Model="@feedbackRequest" OnValidSubmit="SubmitFeedback">
            <DataAnnotationsValidator />
            <div class="alert alert-danger" style="display: @(errorMessage != string.Empty ? "block" : "none")">
                @errorMessage
            </div>
            <div class="alert alert-success" style="display: @(successMessage != string.Empty ? "block" : "none")">
                @successMessage
            </div>

            <div class="form-group mb-3">
                <label>Đánh giá:</label>
                <div class="d-flex gap-4 mt-2">
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="rating" id="like" value="1" 
                               checked="@(feedbackRequest.Rating == 1)" @onclick="() => feedbackRequest.Rating = 1" />
                        <label class="form-check-label" for="like">
                            <i class="bi bi-hand-thumbs-up-fill text-primary me-1"></i> Thích
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="rating" id="dislike" value="0" 
                               checked="@(feedbackRequest.Rating == 0)" @onclick="() => feedbackRequest.Rating = 0" />
                        <label class="form-check-label" for="dislike">
                            <i class="bi bi-hand-thumbs-down-fill text-danger me-1"></i> Không thích
                        </label>
                    </div>
                </div>
            </div>

            <div class="form-group mb-3">
                <label for="content">Nội dung phản hồi:</label>
                <InputTextArea id="content" @bind-Value="feedbackRequest.Content" class="form-control" rows="4" placeholder="Nhập phản hồi của bạn..." />
                <ValidationMessage For="@(() => feedbackRequest.Content)" class="text-danger" />
            </div>

            <AuthorizeView Context="authContext">
                <Authorized>
                    <button type="submit" class="btn btn-success" disabled="@isLoading">
                        @if (isLoading)
                        {
                            <span class="spinner-border spinner-border-sm me-1"></span>
                            <span>Đang gửi...</span>
                        }
                        else
                        {
                            <span>Gửi phản hồi</span>
                        }
                    </button>
                </Authorized>
                <NotAuthorized>
                    <div class="alert alert-warning mb-0">
                        Vui lòng <a href="auth/login">đăng nhập</a> để gửi phản hồi.
                    </div>
                </NotAuthorized>
            </AuthorizeView>
        </EditForm>
    </div>
</div>

@code {
    private FeedbackRequest feedbackRequest = new FeedbackRequest();
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private bool isLoading = false;

    [Parameter]
    public int? TranslationId { get; set; }

    protected override void OnParametersSet()
    {
        if (TranslationId.HasValue)
        {
            feedbackRequest.TranslationId = TranslationId;
        }
    }

    private async Task SubmitFeedback()
    {
        errorMessage = string.Empty;
        successMessage = string.Empty;
        isLoading = true;

        try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity?.IsAuthenticated == true)
            {
                var userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
                feedbackRequest.UserId = userId;

                var result = await FeedbackService.AddFeedbackAsync(feedbackRequest);
                
                if (result.Success)
                {
                    successMessage = "Cảm ơn bạn đã gửi phản hồi!";
                    feedbackRequest = new FeedbackRequest();
                    feedbackRequest.TranslationId = TranslationId;
                }
                else
                {
                    errorMessage = result.Message ?? "Không thể gửi phản hồi. Vui lòng thử lại sau.";
                }
            }
            else
            {
                errorMessage = "Bạn cần đăng nhập để gửi phản hồi.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Lỗi: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
} 