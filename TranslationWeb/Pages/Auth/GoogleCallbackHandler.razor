@page "/auth/google-callback"
@inject NavigationManager NavigationManager
@inject IAuthService AuthService
@inject TranslationWeb.Infrastructure.Services.LocalStorageService LocalStorageService
@inject AuthenticationStateProvider AuthStateProvider
@inject IJSRuntime JSRuntime

<div class="d-flex justify-content-center align-items-center" style="height: 100vh;">
    <div class="text-center">
        <div class="spinner-border text-primary" role="status" style="width: 3rem; height: 3rem;">
            <span class="visually-hidden">Đang tải...</span>
        </div>
        <h4 class="mt-3">Đang xử lý đăng nhập...</h4>
        <p>Vui lòng đợi trong giây lát</p>
        @if (!string.IsNullOrEmpty(statusMessage))
        {
            <div class="alert @(isError ? "alert-danger" : "alert-info") mt-3" role="alert">
                @statusMessage
            </div>
        }
    </div>
</div>

@code {
    private string errorMessage = string.Empty;
    private string statusMessage = string.Empty;
    private bool isError = false;
    private int retryCount = 0;
    private const int MaxRetries = 3;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Lấy query string từ URL hiện tại
            var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
            var queryString = System.Web.HttpUtility.ParseQueryString(uri.Query);
            
            // Kiểm tra xem có token trong query string không
            var token = queryString["token"];
            var error = queryString["error"];

            if (!string.IsNullOrEmpty(error))
            {
                isError = true;
                statusMessage = $"Lỗi đăng nhập: {error}";
                await Task.Delay(2000);
                NavigationManager.NavigateTo("/auth/login", true);
                return;
            }

            if (string.IsNullOrEmpty(token))
            {
                statusMessage = "Đang chuyển hướng đến trang xác thực...";
                StateHasChanged();
                await Task.Delay(500);
                
                // Nếu không có token trong URL, chuyển hướng đến API endpoint để lấy token
                var apiBaseUrl = ApiEndpoints.BaseUrl;
                var redirectUrl = $"{apiBaseUrl}/api/Auth/google-response?redirect={Uri.EscapeDataString(NavigationManager.BaseUri + "auth/google-callback")}";
                NavigationManager.NavigateTo(redirectUrl, true);
                return;
            }

            // Nếu có token, xử lý đăng nhập
            statusMessage = "Đang thiết lập phiên đăng nhập...";
            StateHasChanged();
            
            // Lưu token trước
            await LocalStorageService.SetItemAsync("authToken", token);
            
            // Xử lý token và thử đăng nhập
            var loginSuccess = await TryProcessGoogleTokenAsync(token);
            
            if (loginSuccess)
            {
                statusMessage = "Đăng nhập thành công! Đang chuyển hướng...";
                StateHasChanged();
                await Task.Delay(1000);
                
                // Chuyển hướng về trang chủ sau khi đăng nhập thành công
                NavigationManager.NavigateTo("/", true);
            }
            else
            {
                isError = true;
                statusMessage = "Đăng nhập không thành công. Vui lòng thử lại.";
                StateHasChanged();
                await Task.Delay(2000);
                NavigationManager.NavigateTo("/auth/login", true);
            }
        }
        catch (Exception ex)
        {
            isError = true;
            errorMessage = ex.Message;
            statusMessage = "Đã xảy ra lỗi khi xử lý đăng nhập.";
            StateHasChanged();
            
            await JSRuntime.InvokeVoidAsync("console.error", $"Lỗi xử lý callback: {ex.Message}");
            await Task.Delay(2000);
            NavigationManager.NavigateTo("/auth/login", true);
        }
    }

    private async Task<bool> TryProcessGoogleTokenAsync(string token)
    {
        try
        {
            // Khởi tạo đối tượng AuthResponse với token
            var authResponse = new AuthResponse
            {
                Token = token,
                Success = true,
                RememberMe = true,
                ExpiresAt = DateTime.Now.AddHours(1), // Mặc định 1 giờ
                RefreshTokenExpiresAt = DateTime.Now.AddDays(7) // Mặc định 7 ngày
            };

            // Lưu thông tin xác thực tạm thời
            await LocalStorageService.SetItemAsync("authToken", token);
            await LocalStorageService.SetItemAsync("authExpiration", authResponse.ExpiresAt.ToString("o"));
            
            // Cập nhật trạng thái xác thực
            var authStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
            await authStateProvider.UpdateAuthenticationState(authResponse);
            
            // Gọi API để lấy thông tin người dùng hiện tại
            while (retryCount < MaxRetries)
            {
                statusMessage = $"Đang lấy thông tin người dùng... (lần {retryCount + 1}/{MaxRetries})";
                StateHasChanged();
                
                try
                {
                    // Thử gọi API để lấy thông tin user
                    var userInfo = await AuthService.GetCurrentUserAsync();
                    
                    if (userInfo != null && userInfo.Success)
                    {
                        // Cập nhật thông tin user từ API
                        authResponse.UserId = userInfo.UserId;
                        authResponse.UserName = userInfo.UserName;
                        authResponse.Email = userInfo.Email;
                        authResponse.Roles = userInfo.Roles;
                        authResponse.ExpiresAt = userInfo.ExpiresAt;
                        
                        // Lưu token mới nếu server trả về
                        if (!string.IsNullOrEmpty(userInfo.Token))
                        {
                            authResponse.Token = userInfo.Token;
                            await LocalStorageService.SetItemAsync("authToken", userInfo.Token);
                        }
                        
                        // Lưu thời gian hết hạn mới
                        await LocalStorageService.SetItemAsync("authExpiration", authResponse.ExpiresAt.ToString("o"));
                        
                        // Cập nhật lại trạng thái xác thực với thông tin đầy đủ
                        await authStateProvider.UpdateAuthenticationState(authResponse);
                        
                        // Xác nhận đăng nhập thành công
                        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
                        return authState.User.Identity?.IsAuthenticated == true;
                    }
                    
                    // Tăng số lần thử
                    retryCount++;
                    
                    // Nếu chưa đạt giới hạn thử lại, đợi một chút rồi thử lại
                    if (retryCount < MaxRetries)
                    {
                        await Task.Delay(1000 * retryCount); // Tăng dần thời gian đợi
                    }
                }
                catch
                {
                    retryCount++;
                    if (retryCount < MaxRetries)
                    {
                        await Task.Delay(1000 * retryCount);
                    }
                }
            }
            
            // Kiểm tra lại trạng thái xác thực sau các lần thử
            var finalAuthState = await AuthStateProvider.GetAuthenticationStateAsync();
            return finalAuthState.User.Identity?.IsAuthenticated == true;
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Lỗi xử lý token: {ex.Message}");
            return false;
        }
    }
} 