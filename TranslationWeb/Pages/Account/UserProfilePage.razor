@using Microsoft.AspNetCore.Components.Forms
@page "/account/profile"
@using System.Security.Claims
@inject IUserProfileService UserProfileService
@inject HttpClient Http

<PageTitle>Hồ sơ của tôi - AI Platform</PageTitle>

<div class="ai-page-container">
    <h1 class="ai-page-title">
        <i class="fas fa-robot"></i> Hồ Sơ AI Người Dùng
    </h1>
    <div class="ai-profile-tabs">
        <button class="ai-tab-btn" @onclick="() => SelectedTab = 0" disabled="@(SelectedTab == 0)"><i
                class="fas fa-id-card"></i> Thông tin</button>

        <button class="ai-tab-btn" @onclick="() => SelectedTab = 2" disabled="@(SelectedTab == 2)"><i
                class="fas fa-language"></i> Ngôn ngữ</button>

    </div>
    <div class="ai-profile-tab-content">
        @if (SelectedTab == 0)
        {
            <div class="ai-profile-card ai-profile-info-card">
                <div class="ai-profile-header">
                    <img src="@(_user?.AvatarUrl ?? "/images/default-avatar.png")" alt="Avatar" class="ai-profile-avatar" />
                    <div class="ai-profile-name">
                        <h3>@(_user?.UserName ?? "Tên người dùng")</h3>
                        <p>@(_user?.Email ?? "email@placeholder.com")</p>
                        <span class="ai-profile-role">
                            @if (_user?.Roles?.Contains("Admin") == true)
                            {
                                <span>Quản trị viên</span>
                            }
                            else
                            {

                                <span>Người dùng</span>
                            }
                        </span>
                    </div>
                    <button class="ai-btn-v2 ai-edit-profile-btn" @onclick="EnableEdit" disabled="@isEditing">
                        <i class="fas fa-pencil-alt"></i> Chỉnh sửa
                    </button>
                </div>
                <div class="ai-profile-body">
                    @if (isEditing)
                    {
                        <EditForm Model="_user" OnValidSubmit="SaveProfile">
                            <div class="ai-info-grid">
                                <div><i class="fas fa-calendar-alt"></i> Ngày tham gia:</div>
                                <div>@(_user?.MemberSince.ToString("dd/MM/yyyy") ?? "(chưa có)")</div>
                                <div><i class="fas fa-globe"></i> Ngôn ngữ ưu tiên:</div>
                                <div>
                                    <InputText class="form-control" @bind-Value="_user.PreferredLanguage" />
                                </div>
                                <div><i class="fas fa-user-edit"></i> Số lần dịch:</div>
                                <div>@(_user?.TranslationCount.ToString() ?? "(chưa có)")</div>
                            </div>
                            <div class="mb-2">
                                <label for="avatarUpload"><i class="fas fa-image"></i> Ảnh đại diện mới:</label>
                                <InputFile id="avatarUpload" OnChange="UploadAvatar" accept="image/*" />
@if (!string.IsNullOrEmpty(_uploadingAvatarUrl))
{
    <div class="mt-1"><img src="@_uploadingAvatarUrl" alt="Avatar Preview" /></div>
}
                            </div>
                            <h4>Giới thiệu</h4>
                            <InputTextArea class="form-control ai-profile-bio" @bind-Value="_user.Bio" rows="3" />
                            <div class="mt-2">
                                <button class="ai-btn-v2 ai-btn-primary" type="submit">Lưu</button>
                                <button class="ai-btn-v2 ai-btn-secondary" type="button" @onclick="CancelEdit">Huỷ</button>
                            </div>
                        </EditForm>
                    }
                    else
                    {
                        <div class="ai-info-grid">
                            <div><i class="fas fa-calendar-alt"></i> Ngày tham gia:</div>
                            <div>@(_user?.MemberSince.ToString("dd/MM/yyyy") ?? "(chưa có)")</div>
                            <div><i class="fas fa-globe"></i> Ngôn ngữ ưu tiên:</div>
                            <div>@(_user?.PreferredLanguage ?? "(chưa có)")</div>
                            <div><i class="fas fa-user-edit"></i> Số lần dịch:</div>
                            <div>@(_user?.TranslationCount.ToString() ?? "(chưa có)")</div>
                        </div>
                        <h4>Giới thiệu</h4>
                        <p class="ai-profile-bio">@(_user?.Bio ?? "Chưa có giới thiệu.")</p>
                    }
                </div>
            </div>
        }

        else if (SelectedTab == 2)
        {
            <div class="ai-profile-card ai-profile-languages-card">
                <h4>Ngôn ngữ thường dùng</h4>
                <div class="ai-languages-list">
                    <span class="ai-language-tag"><i class="fas fa-flag-usa"></i> Tiếng Anh (12)</span>
                    <span class="ai-language-tag"><i class="fas fa-flag-vn"></i> Tiếng Việt (8)</span>
                    <span class="ai-language-tag"><i class="fas fa-flag-jp"></i> Tiếng Nhật (3)</span>
                    <span class="ai-language-tag"><i class="fas fa-flag-fr"></i> Tiếng Pháp (1)</span>
                </div>
                <p class="ai-profile-bio">Dữ liệu ngôn ngữ sẽ được cập nhật tự động từ hệ thống AI.</p>
            </div>
        }

    </div>
</div>

@code {
    private UserProfileModel? _user;
    private int SelectedTab = 0;
    private bool isEditing = false;
    private UserProfileModel? _backupUser;
    private string? _uploadingAvatarUrl;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task UploadAvatar(InputFileChangeEventArgs e)
{
    var file = e.File;
    if (file == null) return;
    await UploadAvatarFile(file);
}

    private async Task UploadAvatarFile(Microsoft.AspNetCore.Components.Forms.IBrowserFile file)
    {
        try
        {
            using var stream = file.OpenReadStream(5 * 1024 * 1024); // 5MB max
            var url = await UserProfileService.UploadAvatarAsync(stream, file.Name);
            if (!string.IsNullOrEmpty(url) && _user != null)
            {
                _user.AvatarUrl = url;
                _uploadingAvatarUrl = url;
                StateHasChanged();
            }
            else
            {
                Console.WriteLine("Upload avatar thất bại hoặc không trả về url.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Lỗi upload avatar: " + ex.Message);
        }
    }

    private class AvatarUploadResponse
    {
        public string? avatarUrl { get; set; }
    }

    private async Task LoadUsers()
    {
        try
        {
            _user = await UserProfileService.GetCurrentUserProfileAsync();
            _uploadingAvatarUrl = _user?.AvatarUrl;
        }
        catch (Exception ex)
        {
            Console.WriteLine("Lỗi: " + ex.Message);
        }
    }

    private void EnableEdit()
    {
        if (_user != null)
        {
            _backupUser = new UserProfileModel {
                Id = _user.Id,
                UserName = _user.UserName,
                Email = _user.Email,
                EmailConfirmed = _user.EmailConfirmed,
                LockoutEnabled = _user.LockoutEnabled,
                LockoutEnd = _user.LockoutEnd,
                Roles = _user.Roles != null ? new List<string>(_user.Roles) : new List<string>(),
                DisplayName = _user.DisplayName,
                AvatarUrl = _user.AvatarUrl,
                Bio = _user.Bio,
                PreferredLanguage = _user.PreferredLanguage,
                FrequentlyUsedLanguages = _user.FrequentlyUsedLanguages != null ? new List<string>(_user.FrequentlyUsedLanguages) : new List<string>(),
                Theme = _user.Theme,
                LastActive = _user.LastActive,
                TimeZone = _user.TimeZone,
                TranslationCount = _user.TranslationCount,
                MemberSince = _user.MemberSince
            };
        }
        isEditing = true;
    }

    private async Task SaveProfile()
    {
        if (_user != null)
        {
            await UserProfileService.UpdateProfileAsync(_user);
            isEditing = false;
            StateHasChanged();
        }
    }

    private void CancelEdit()
    {
        if (_backupUser != null)
        {
            _user = _backupUser;
        }
        isEditing = false;
    }
}